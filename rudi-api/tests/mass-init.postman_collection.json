{
	"info": {
		"_postman_id": "bb73f01c-09d0-4237-972a-a04ebb1f5f57",
		"name": "mass-init",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Check if init metadata exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Count by producer\", () => {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"    const responseJson = pm.response.json()",
							"",
							"    const orgId = pm.collectionVariables.get('softOrg1Id')",
							"    // console.log(`orgId: ${orgId}`)",
							"    responseJson.map((res) => {",
							"        // console.log(`res.producer.organization_id: ${res.producer.organization_id}`)",
							"        if(res.producer.organization_id == orgId) {",
							"            // console.log(res.count)",
							"            pm.collectionVariables.set('countWithOrg1', res.count)",
							"        }",
							"    })",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{adminUrl}}/{{data}}?count_by=collection_tag&collection_tag=init",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{adminUrl}}",
						"{{data}}"
					],
					"query": [
						{
							"key": "count_by",
							"value": "collection_tag"
						},
						{
							"key": "collection_tag",
							"value": "init"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Mass init",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Mass init\", () => {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/{{adminUrl}}/{{data}}/init",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{adminUrl}}",
						"{{data}}",
						"init"
					]
				}
			},
			"response": []
		},
		{
			"name": "Count metadata (producer)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Count by producer\", () => {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"    const responseJson = pm.response.json()",
							"",
							"    const orgId = pm.collectionVariables.get('softOrg1Id')",
							"    // console.log(`orgId: ${orgId}`)",
							"    responseJson.map((res) => {",
							"        // console.log(`res.producer.organization_id: ${res.producer.organization_id}`)",
							"        if(res.producer.organization_id == orgId) {",
							"            // console.log(res.count)",
							"            pm.collectionVariables.set('countWithOrg1', res.count)",
							"        }",
							"    })",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{adminUrl}}/{{data}}?count_by=producer&producer.organization_name=\"Ville de Rennes\"",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{adminUrl}}",
						"{{data}}"
					],
					"query": [
						{
							"key": "count_by",
							"value": "producer"
						},
						{
							"key": "producer.organization_name",
							"value": "\"Ville de Rennes\""
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{pm_jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const TOKEN_DURATION_S = 1200",
					"const API_TOKEN_NAME = 'pm_jwt'",
					"const PORTAL_TOKEN_NAME = 'portal_jwt'",
					"const TRACE = false",
					"const DEBUG = false",
					"",
					"utils = {",
					"    getContactEmail: function (contactName) {",
					"        return `${contactName",
					"            .replace(/(Miss|(Ms|Mrs|Mr|Dr)\\.)\\s|'Jr\\.'/gi, '')",
					"            .toLowerCase()",
					"            .replace(/\\s+|\\.\\./g, '.')",
					"            .replace(/^\\.+|\\.+$|\\'+/g, '')",
					"            }@irisa.fr`;",
					"    },",
					"};",
					"",
					"time = {",
					"    now: function () {",
					"        return new Date().toISOString()",
					"    },",
					"",
					"    nowEpochS: function () {",
					"        return _.floor(new Date().getTime() / 1000)",
					"    },",
					"",
					"    timezone: function () {",
					"        return new Date().getTimezoneOffset()",
					"    },",
					"}",
					"codec = {",
					"    fromBase64: function (data) {",
					"        return Buffer.from(data, 'base64').toString('utf-8');",
					"    },",
					"",
					"    fromBase64Url: function (base64Url) {",
					"        const padded = (base64Url.Length % 4 == 0)",
					"            ? base64Url",
					"            : base64Url + \"====\".substring(base64Url.Length % 4);",
					"",
					"        const base64 = padded",
					"            .replace(\"_\", \"/\")",
					"            .replace(\"-\", \"+\");",
					"",
					"        return this.fromBase64(base64);",
					"    },",
					"",
					"    streamToUtf8: function (data) {",
					"        return data.stream.toString('utf8')",
					"    }",
					"};",
					"",
					"rand = {",
					"    get: function (randName) {",
					"        return pm.variables.replaceIn(randName);",
					"    },",
					"",
					"    pickInList: function (list) {",
					"        const randomNumber = _.random(0, list.length - 1);",
					"        return list[randomNumber];",
					"    },",
					"",
					"    pick: function (listName) {",
					"        return this.pickInList(pm.collectionVariables.get(listName));",
					"    },",
					"",
					"    initVal: function (field) {",
					"        const val = pm.collectionVariables.get(field);",
					"        if (val) return val;",
					"        const randVal = rand.get('{{$randomUUID}}');",
					"        pm.collectionVariables.set(field, randVal);",
					"        return randVal;",
					"    },",
					"",
					"    getContactEmail: function (contactName) {",
					"        return `${contactName",
					"            .replace(/(Miss|(Ms|Mrs|Mr|Dr)\\.)\\s|'Jr\\.'/gi, '')",
					"            .toLowerCase()",
					"            .replace(/\\s+|\\.\\./g, '.')",
					"            .replace(/^\\.+|\\.+$|\\'+/g, '')",
					"            }@irisa.fr`;",
					"    },",
					"};",
					"",
					"secu = {",
					"",
					"    isTokenValid: function (tokenName) {",
					"        if (TRACE) console.log('-- is ' + tokenName + ' Valid --')",
					"        const token = pm.collectionVariables.get(tokenName)",
					"        // console.log('typeof token: ' + typeof token)",
					"        if (!token || typeof token !== 'string') {",
					"            if (DEBUG) console.log('Token ' + tokenName + ' is invalid: ' + JSON.stringify(token))",
					"            return false",
					"        }",
					"        // console.log('jwt: ' + JSON.stringify(token))",
					"        const jwtBodyEncoded = token.split('.')[1]",
					"        const jwtBody = JSON.parse(codec.fromBase64Url(jwtBodyEncoded))",
					"        if (!jwtBody.exp) {",
					"            if (DEBUG) console.log('No expiration time was found')",
					"            return false",
					"        }",
					"        const isValid = jwtBody.exp > time.nowEpochS()",
					"        if (DEBUG) console.log(tokenName + ' is ' + (isValid ? '' : 'not ') + 'valid')",
					"        return isValid",
					"    },",
					"",
					"    renewApiToken: async function (tokenName, next) {",
					"        if (TRACE) console.log('-- renewApiToken --')",
					"        const reqUrl = pm.variables.get('cryptoJwtUrl') + '/forge'",
					"        if (DEBUG) console.log('reqUrl: ' + reqUrl)",
					"        const reqNewToken = {",
					"            url: reqUrl,",
					"            method: 'POST',",
					"            header: { \"Content-Type\": \"application/json\" },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify({",
					"                    'exp': time.nowEpochS() + TOKEN_DURATION_S,",
					"                    'jti': rand.get('{{$randomUUID}}'),",
					"                    'sub': pm.variables.get('pm_client_name'),",
					"                    'client_id': pm.variables.get('pm_client_id'),",
					"                    'req_mtd': 'all',",
					"                    'req_url': 'all'",
					"                })",
					"            }",
					"        }",
					"        pm.sendRequest(reqNewToken, (err, res) => {",
					"            const token = codec.streamToUtf8(res)",
					"            if (DEBUG) console.log('rudiProdToken : ' + token)",
					"            pm.expect(res).to.have.property('code', 200);",
					"            pm.expect(token).to.match(/^\\w+\\.\\w+\\.[\\w\\-=]+$/)",
					"            pm.collectionVariables.set(tokenName, token)",
					"            if (DEBUG) console.log('API token stored')",
					"",
					"            next(token)",
					"            //return token",
					"        })",
					"    },",
					"",
					"    renewPortalToken: async function (tokenName, rudiProdToken) {",
					"        if (TRACE) console.log('-- renewPortalToken --')",
					"        const reqUrl = pm.variables.get('baseUrl') + '/' + pm.variables.get('adminUrl') + '/portal/token'",
					"        // if (DEBUG) console.log('reqUrl: ' + reqUrl)",
					"        const rpToken = rudiProdToken",
					"        const reqNewToken = {",
					"            url: reqUrl,",
					"            method: 'GET',",
					"            header: {",
					"                \"Content-Type\": \"application/json\",",
					"                \"Authorization\": 'Bearer ' + rpToken",
					"            },",
					"        }",
					"        pm.sendRequest(reqNewToken, (err, res) => {",
					"            pm.expect(res).to.have.property('code', 200);",
					"            //if (DEBUG) console.log('renewPortalToken res: ' + JSON.stringify(res))",
					"            const token = JSON.parse(codec.streamToUtf8(res)).access_token",
					"            //const token = res.json()",
					"            if (DEBUG) console.log('Portal token: ' + token)",
					"",
					"            pm.expect(token).to.match(/^\\w+\\.\\w+\\.[\\w\\-=]+$/)",
					"            pm.collectionVariables.set(tokenName, token)",
					"            if (DEBUG) console.log('Portal token stored')",
					"",
					"        })",
					"    },",
					"",
					"    getRudiProdToken: async function (next) {",
					"        if (TRACE) console.log('-- getRudiProdToken --')",
					"        const tokenName = API_TOKEN_NAME",
					"        if (!secu.isTokenValid(tokenName)) await secu.renewApiToken(tokenName, next)",
					"        else next(pm.variables.get(tokenName))",
					"        return pm.variables.get(tokenName)",
					"    },",
					"",
					"    getPortalToken: async function (apiToken) {",
					"        if (TRACE) console.log('-- getPortalToken --')",
					"        const tokenName = PORTAL_TOKEN_NAME",
					"        if (!secu.isTokenValid(tokenName)) await secu.renewPortalToken(tokenName, apiToken)",
					"        return pm.variables.get(tokenName)",
					"    }",
					"",
					"}",
					"",
					"",
					"secu.getRudiProdToken(secu.getPortalToken)",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "exp",
			"value": ""
		},
		{
			"key": "pm_jwt",
			"value": ""
		},
		{
			"key": "now",
			"value": ""
		},
		{
			"key": "timezone",
			"value": ""
		},
		{
			"key": "nowEpochS",
			"value": ""
		},
		{
			"key": "portal_jwt",
			"value": ""
		}
	]
}