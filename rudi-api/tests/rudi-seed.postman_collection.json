{
	"info": {
		"_postman_id": "3b17b6d2-d371-4c17-a705-ad1e02160f67",
		"name": "rudi-seed",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Init lists",
			"item": [
				{
					"name": "Get keywords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Keywords received\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set('keywords', responseJson);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/enum/Keywords",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"enum",
								"Keywords"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get themes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Themes received\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set('themes', responseJson);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/enum/Themes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"enum",
								"Themes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get licences",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All licence codes retrieved\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set('seedLicence', responseJson[1])",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/licence_codes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"licence_codes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add/edit/get org/contacts",
			"item": [
				{
					"name": "Add contact 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Contact 1 created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const contactName = rand.get('{{$randomFullName}}');",
									"",
									"pm.collectionVariables.set('seedContact1Id', rand.get('{{$randomUUID}}'))",
									"pm.collectionVariables.set('seedContact1Name', contactName)",
									"pm.collectionVariables.set('seedContact1Email', utils.getContactEmail(contactName))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contact_id\": \"{{seedContact1Id}}\",\n    \"contact_name\": \"{{seedContact1Name}}\",\n    \"email\": \"{{seedContact1Email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{cont}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{cont}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add contact 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Contact 2 created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const contactName = rand.get('{{$randomFullName}}');",
									"",
									"pm.collectionVariables.set('seedContact2Id', rand.get('{{$randomUUID}}'))",
									"pm.collectionVariables.set('seedContact2Name', contactName)",
									"pm.collectionVariables.set('seedContact2Email', utils.getContactEmail(contactName))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contact_id\": \"{{seedContact2Id}}\",\n    \"contact_name\": \"{{seedContact2Name}}\",\n    \"email\": \"{{seedContact2Email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{cont}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{cont}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add contact 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Contact 3 created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const contactName = rand.get('{{$randomFullName}}');",
									"",
									"pm.collectionVariables.set('seedContact3Id', rand.get('{{$randomUUID}}'))",
									"pm.collectionVariables.set('seedContact3Name', contactName)",
									"pm.collectionVariables.set('seedContact3Email', utils.getContactEmail(contactName))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contact_id\": \"{{seedContact3Id}}\",\n    \"contact_name\": \"{{seedContact3Name}}\",\n    \"email\": \"{{seedContact3Email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{cont}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{cont}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add org 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Producer 1 created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('seedOrg1Id', rand.get('{{$randomUUID}}'))",
									"pm.collectionVariables.set('seedOrg1Name', rand.get('{{$randomCompanyName}}'))",
									"const orgAddress = `${rand.get('{{$randomStreetAddress}}')}, ${rand.get('{{$randomCity}}')}`",
									"pm.collectionVariables.set('seedOrg1Address', orgAddress)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organization_id\": \"{{seedOrg1Id}}\",\n    \"organization_name\": \"{{seedOrg1Name}}\",\n    \"organization_address\": \"{{seedOrg1Address}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{org}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{org}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add org 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Producer 2 created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('seedOrg2Id', rand.get('{{$randomUUID}}'))",
									"pm.collectionVariables.set('seedOrg2Name', rand.get('{{$randomCompanyName}}'))",
									"const orgAddress = `${rand.get('{{$randomStreetAddress}}')}, ${rand.get('{{$randomCity}}')}`",
									"pm.collectionVariables.set('seedOrg2Address', orgAddress)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organization_id\": \"{{seedOrg2Id}}\",\n    \"organization_name\": \"{{seedOrg2Name}}\",\n    \"organization_address\": \"{{seedOrg2Address}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{org}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{org}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get orgs\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organization_id\": \"{{seedOrg2Id}}\",\n    \"organization_name\": \"{{seedOrg2Name}}\",\n    \"organization_address\": \"{{seedOrg2Address}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{org}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{org}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Add x metadata",
			"item": [
				{
					"name": "Add x metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New metadata created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"",
									"    /*",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson);",
									"    pm.expect(responseJson.contacts.length).to.eq(2);",
									"    */",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('seedLastMetaId', rand.get('{{$randomUUID}}'))",
									"",
									"//————— Thesauri",
									"pm.collectionVariables.set('randomTheme', rand.pick('themes'));",
									"pm.collectionVariables.set('randomKeyword1', rand.pick('keywords'));",
									"pm.collectionVariables.set('randomKeyword2', rand.pick('keywords'));",
									"pm.collectionVariables.set('randomLicence', rand.pick('licences'));",
									"",
									"//————— Producer",
									"const orgs = [",
									"    pm.collectionVariables.get('seedOrg1Id'), ",
									"    pm.collectionVariables.get('seedOrg2Id')]",
									"const randomOrgId = rand.pickInList(orgs)",
									"pm.collectionVariables.set('randomOrg', randomOrgId);",
									"const randomOrgId2 = rand.pickInList(orgs)",
									"pm.collectionVariables.set('randomMetaInfoOrg', randomOrgId2);",
									"",
									"//————— Contact 1",
									"const contacts = [ ",
									"    pm.collectionVariables.get('seedContact1Id'), ",
									"    pm.collectionVariables.get('seedContact2Id'), ",
									"    pm.collectionVariables.get('seedContact3Id')];",
									"//console.log(`contacts: ${contacts}`)",
									"",
									"",
									"const randomContId1 = rand.pickInList(contacts)",
									"//console.log(`randomContId1: ${randomContId1}`)",
									"",
									"pm.collectionVariables.set('randomContact1', randomContId1);",
									"",
									"//————— Contact 2",
									"const contactsLeft = contacts",
									"    .filter(function(value, index, arr){ return value != randomContId1 });",
									"",
									"const randomContId2 = rand.pickInList(contactsLeft)",
									"//console.log(`randomContId2: ${randomContId2}`)",
									"",
									"pm.collectionVariables.set('randomContact2', randomContId2);",
									"pm.collectionVariables.set('randomContact3', rand.pickInList(contacts));",
									"",
									"//————— Media id",
									"pm.collectionVariables.set('seedMediaId', rand.get('{{$randomUUID}}'))",
									"",
									"",
									"//————— Description",
									"pm.collectionVariables.set('randomTitle', rand.get('{{$randomCatchPhrase}}'));",
									"pm.collectionVariables.set('randomSynopsis', `${rand.get('{{$randomProductAdjective}}')} ${rand.get('{{$randomBs}}')}`);",
									"pm.collectionVariables.set('randomSummary', `${rand.get('{{$randomPhrase}}')} ${rand.get('{{$randomPhrase}}')} ${rand.get('{{$randomLoremParagraph}}')}`);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{seedLastMetaId}}\",\n    \"resource_title\": \"{{randomTitle}}\",\n    \"collection_tag\": \"{{stamp}}\",\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{randomSynopsis}}\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{randomSummary}}\"\n        }\n    ],\n    \"theme\": \"{{randomTheme}}\",\n    \"keywords\": [\n        \"{{randomKeyword1}}\",\n        \"{{randomKeyword2}}\"\n    ],\n    \"geography\": {\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": 1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": -48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"{{$randomDatePast}}\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{randomOrg}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{randomContact1}}\"\n        },\n        {\n            \"contact_id\": \"{{randomContact2}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\",\n        \"metadata_provider\": {\n            \"organization_id\": \"{{randomMetaInfoOrg}}\"\n        },\n        \"metadata_contacts\": [\n            {\n                \"contact_id\": \"{{randomContact3}}\"\n            }\n        ]\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{$randomDateRecent}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_type\": \"STANDARD\",\n            \"licence_label\": \"{{seedLicence}}\"\n        },\n        \"confidentiality\": {\n            \"restricted_access\": false,\n            \"gdpr_sensitive\": false\n        }\n    },\n    \"available_formats\": [\n        {\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{seedMediaId}}\",\n            \"media_name\": \"{{randomTitle}}.json\",\n            \"connector\": {\n                \"url\": \"https://shared-rudi.aqmo.org/media/{{seedMediaId}}\"\n            },\n            \"file_type\": \"application/json\",\n            \"file_size\": 59016,\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"4c9ee0f14e835927a1bbafde0eb89fb3\"\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{data}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{data}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Checks",
			"item": [
				{
					"name": "Edit metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New metadata created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"",
									"    /*",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson);",
									"    pm.expect(responseJson.contacts.length).to.eq(2);",
									"    */",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{seedLastMetaId}}\",\n    \"resource_title\": \"{{randomTitle}}\",\n    \"collection_tag\": \"{{stamp}}\",\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"All right\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{randomSummary}}\"\n        }\n    ],\n    \"theme\": \"{{randomTheme}}\",\n    \"keywords\": [\n        \"{{randomKeyword1}}\",\n        \"{{randomKeyword2}}\"\n    ],\n    \"geography\": {\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": 1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": -48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"{{$randomDatePast}}\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{randomOrg}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{randomContact1}}\"\n        },\n        {\n            \"contact_id\": \"{{randomContact2}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\",\n        \"metadata_provider\": {\n            \"organization_id\": \"{{randomMetaInfoOrg}}\"\n        },\n        \"metadata_contacts\": [\n            {\n                \"contact_id\": \"{{randomContact3}}\"\n            }\n        ]\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{$randomDateRecent}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_type\": \"STANDARD\",\n            \"licence_label\": \"{{seedLicence}}\"\n        }\n    },\n\"available_formats\": [\n    {\n        \"media_type\": \"FILE\",\n        \"media_id\": \"{{seedMediaId}}\",\n        \"media_name\": \"{{randomTitle}}.json\",\n        \"connector\": {\n            \"url\": \"https://shared-rudi.aqmo.org/media/{{seedMediaId}}\"\n        },\n        \"file_type\": \"application/json\",\n        \"file_size\": 59016,\n        \"checksum\": {\n            \"algo\": \"MD5\",\n            \"hash\": \"4c9ee0f14e835927a1bbafde0eb89fb3\"\n        }\n    }\n]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{data}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{data}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get 1 metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 metadata created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    // console.log(metadataList.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{data}}/{{seedLastMetaId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{data}}",
								"{{seedLastMetaId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Count metadata (api version)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 metadata created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{data}}?count_by=metadata_info.api_version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{data}}"
							],
							"query": [
								{
									"key": "count_by",
									"value": "metadata_info.api_version"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Group metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Group by api_version\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{data}}?group_by=metadata_info.api_version&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{data}}"
							],
							"query": [
								{
									"key": "group_by",
									"value": "metadata_info.api_version"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 metadata created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    // console.log(metadataList.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{data}}?limit=10&keywords={\"$in\":[\"population\",\"plu\"]}&temporal_spread.start_date={\"$gte\":\"2019-12-31T23:24:51.000Z\",\"$lte\":\"2021-05-28T23:24:51.000Z\"}&perlin=2346&resource_languages=\"fr\"",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{data}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "keywords",
									"value": "{\"$in\":[\"population\",\"plu\"]}"
								},
								{
									"key": "temporal_spread.start_date",
									"value": "{\"$gte\":\"2019-12-31T23:24:51.000Z\",\"$lte\":\"2021-05-28T23:24:51.000Z\"}"
								},
								{
									"key": "perlin",
									"value": "2346"
								},
								{
									"key": "resource_languages",
									"value": "\"fr\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter metadata alt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 metadata created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    // console.log(metadataList.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{data}}?limit=10&keywords={\"$in\":[\"population\",\"plu\"]}&temporal_spread.start_date={\"$gte\":\"2019-12-31T23:24:51.000Z\",\"$lte\":\"2021-05-28T23:24:51.000Z\"}&perlin=2346&resource_languages=\"fr\"",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{data}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "keywords",
									"value": "{\"$in\":[\"population\",\"plu\"]}"
								},
								{
									"key": "temporal_spread.start_date",
									"value": "{\"$gte\":\"2019-12-31T23:24:51.000Z\",\"$lte\":\"2021-05-28T23:24:51.000Z\"}"
								},
								{
									"key": "perlin",
									"value": "2346"
								},
								{
									"key": "resource_languages",
									"value": "\"fr\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Count metadata (producer)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 metadata created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson.length)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{data}}?count_by=producer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{data}}"
							],
							"query": [
								{
									"key": "count_by",
									"value": "producer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter metadata (producer)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 metadata created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    // console.log(metadataList.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{data}}?producer.organization_id=\"{{seedOrg2Id}}\"&fields=global_id,metadata_info.api_version,producer.organization_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{data}}"
							],
							"query": [
								{
									"key": "producer.organization_id",
									"value": "\"{{seedOrg2Id}}\""
								},
								{
									"key": "fields",
									"value": "global_id,metadata_info.api_version,producer.organization_id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get 10 metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 metadata created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    // console.log(metadataList.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{data}}?limit=10&fields=updatedAt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{data}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "fields",
									"value": "updatedAt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get 10 media",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 metadata created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    // console.log(metadataList.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{media}}?limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{media}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Count 'rudi-seed' metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.collectionVariables.get('stamp')",
									"pm.test(`Metadata with '${stamp}' stamp'`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    // console.log(metadataList.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{data}}?count_by=collection_tag&updated_before=2021-07-12T13:44:16.623Z&updated_after=2021-07-12T13:43:15.623Z",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{data}}"
							],
							"query": [
								{
									"key": "count_by",
									"value": "collection_tag"
								},
								{
									"key": "updated_before",
									"value": "2021-07-12T13:44:16.623Z"
								},
								{
									"key": "updated_after",
									"value": "2021-07-12T13:43:15.623Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Accessing logs\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{logs}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{logs}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getLogs filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Accessing logs\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{logs}}?log_level=debug&limit=20&offset=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{logs}}"
							],
							"query": [
								{
									"key": "log_level",
									"value": "debug"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getLogs : time gte",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Accessing logs\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{adminUrl}}/{{logs}}?limit=200",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{adminUrl}}",
								"{{logs}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "200"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{pm_jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const TOKEN_DURATION_S = 1200",
					"const API_TOKEN_NAME = 'pm_jwt'",
					"const PORTAL_TOKEN_NAME = 'portal_jwt'",
					"const TRACE = false",
					"const DEBUG = false",
					"",
					"utils = {",
					"    getContactEmail: function (contactName) {",
					"        return `${contactName",
					"            .replace(/(Miss|(Ms|Mrs|Mr|Dr)\\.)\\s|'Jr\\.'/gi, '')",
					"            .toLowerCase()",
					"            .replace(/\\s+|\\.\\./g, '.')",
					"            .replace(/^\\.+|\\.+$|\\'+/g, '')",
					"            }@irisa.fr`;",
					"    },",
					"};",
					"",
					"time = {",
					"    now: function () {",
					"        return new Date().toISOString()",
					"    },",
					"",
					"    nowEpochS: function () {",
					"        return _.floor(new Date().getTime() / 1000)",
					"    },",
					"",
					"    timezone: function () {",
					"        return new Date().getTimezoneOffset()",
					"    },",
					"}",
					"codec = {",
					"    fromBase64: function (data) {",
					"        return Buffer.from(data, 'base64').toString('utf-8');",
					"    },",
					"",
					"    fromBase64Url: function (base64Url) {",
					"        const padded = (base64Url.Length % 4 == 0)",
					"            ? base64Url",
					"            : base64Url + \"====\".substring(base64Url.Length % 4);",
					"",
					"        const base64 = padded",
					"            .replace(\"_\", \"/\")",
					"            .replace(\"-\", \"+\");",
					"",
					"        return this.fromBase64(base64);",
					"    },",
					"",
					"    streamToUtf8: function (data) {",
					"        return data.stream.toString('utf8')",
					"    }",
					"};",
					"",
					"rand = {",
					"    get: function (randName) {",
					"        return pm.variables.replaceIn(randName);",
					"    },",
					"",
					"    pickInList: function (list) {",
					"        const randomNumber = _.random(0, list.length - 1);",
					"        return list[randomNumber];",
					"    },",
					"",
					"    pick: function (listName) {",
					"        return this.pickInList(pm.collectionVariables.get(listName));",
					"    },",
					"",
					"    initVal: function (field) {",
					"        const val = pm.collectionVariables.get(field);",
					"        if (val) return val;",
					"        const randVal = rand.get('{{$randomUUID}}');",
					"        pm.collectionVariables.set(field, randVal);",
					"        return randVal;",
					"    },",
					"",
					"    getContactEmail: function (contactName) {",
					"        return `${contactName",
					"            .replace(/(Miss|(Ms|Mrs|Mr|Dr)\\.)\\s|'Jr\\.'/gi, '')",
					"            .toLowerCase()",
					"            .replace(/\\s+|\\.\\./g, '.')",
					"            .replace(/^\\.+|\\.+$|\\'+/g, '')",
					"            }@irisa.fr`;",
					"    },",
					"};",
					"",
					"secu = {",
					"",
					"    isTokenValid: function (tokenName) {",
					"        if (TRACE) console.log('-- is ' + tokenName + ' Valid --')",
					"        const token = pm.collectionVariables.get(tokenName)",
					"        // console.log('typeof token: ' + typeof token)",
					"        if (!token || typeof token !== 'string') {",
					"            if (DEBUG) console.log('Token ' + tokenName + ' is invalid: ' + JSON.stringify(token))",
					"            return false",
					"        }",
					"        // console.log('jwt: ' + JSON.stringify(token))",
					"        const jwtBodyEncoded = token.split('.')[1]",
					"        const jwtBody = JSON.parse(codec.fromBase64Url(jwtBodyEncoded))",
					"        if (!jwtBody.exp) {",
					"            if (DEBUG) console.log('No expiration time was found')",
					"            return false",
					"        }",
					"        const isValid = jwtBody.exp > time.nowEpochS()",
					"        if (DEBUG) console.log(tokenName + ' is ' + (isValid ? '' : 'not ') + 'valid')",
					"        return isValid",
					"    },",
					"",
					"    renewApiToken: async function (tokenName, next) {",
					"        if (TRACE) console.log('-- renewApiToken --')",
					"        const reqUrl = pm.variables.get('cryptoJwtUrl') + '/forge'",
					"        if (DEBUG) console.log('reqUrl: ' + reqUrl)",
					"        const reqNewToken = {",
					"            url: reqUrl,",
					"            method: 'POST',",
					"            header: { \"Content-Type\": \"application/json\" },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify({",
					"                    'exp': time.nowEpochS() + TOKEN_DURATION_S,",
					"                    'jti': rand.get('{{$randomUUID}}'),",
					"                    'sub': pm.variables.get('pm_client_name'),",
					"                    'client_id': pm.variables.get('pm_client_id'),",
					"                    'req_mtd': 'all',",
					"                    'req_url': 'all'",
					"                })",
					"            }",
					"        }",
					"        pm.sendRequest(reqNewToken, (err, res) => {",
					"            const token = codec.streamToUtf8(res)",
					"            if (DEBUG) console.log('rudiProdToken : ' + token)",
					"            pm.expect(res).to.have.property('code', 200);",
					"            pm.expect(token).to.match(/^\\w+\\.\\w+\\.[\\w\\-=]+$/)",
					"            pm.collectionVariables.set(tokenName, token)",
					"            if (DEBUG) console.log('API token stored')",
					"",
					"            next(token)",
					"            //return token",
					"        })",
					"    },",
					"",
					"    renewPortalToken: async function (tokenName, rudiProdToken) {",
					"        if (TRACE) console.log('-- renewPortalToken --')",
					"        const reqUrl = pm.variables.get('baseUrl') + '/' + pm.variables.get('adminUrl') + '/portal/token'",
					"        // if (DEBUG) console.log('reqUrl: ' + reqUrl)",
					"        const rpToken = rudiProdToken",
					"        const reqNewToken = {",
					"            url: reqUrl,",
					"            method: 'GET',",
					"            header: {",
					"                \"Content-Type\": \"application/json\",",
					"                \"Authorization\": 'Bearer ' + rpToken",
					"            },",
					"        }",
					"        pm.sendRequest(reqNewToken, (err, res) => {",
					"            pm.expect(res).to.have.property('code', 200);",
					"            //if (DEBUG) console.log('renewPortalToken res: ' + JSON.stringify(res))",
					"            const token = JSON.parse(codec.streamToUtf8(res)).access_token",
					"            //const token = res.json()",
					"            if (DEBUG) console.log('Portal token: ' + token)",
					"",
					"            pm.expect(token).to.match(/^\\w+\\.\\w+\\.[\\w\\-=]+$/)",
					"            pm.collectionVariables.set(tokenName, token)",
					"            if (DEBUG) console.log('Portal token stored')",
					"",
					"        })",
					"    },",
					"",
					"    getRudiProdToken: async function (next) {",
					"        if (TRACE) console.log('-- getRudiProdToken --')",
					"        const tokenName = API_TOKEN_NAME",
					"        if (!secu.isTokenValid(tokenName)) await secu.renewApiToken(tokenName, next)",
					"        else next(pm.variables.get(tokenName))",
					"        return pm.variables.get(tokenName)",
					"    },",
					"",
					"    getPortalToken: async function (apiToken) {",
					"        if (TRACE) console.log('-- getPortalToken --')",
					"        const tokenName = PORTAL_TOKEN_NAME",
					"        if (!secu.isTokenValid(tokenName)) await secu.renewPortalToken(tokenName, apiToken)",
					"        return pm.variables.get(tokenName)",
					"    }",
					"",
					"}",
					"",
					"",
					"secu.getRudiProdToken(secu.getPortalToken)",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "stamp",
			"value": "rudi-seed"
		},
		{
			"key": "keywords",
			"value": ""
		},
		{
			"key": "themes",
			"value": ""
		},
		{
			"key": "licences",
			"value": ""
		},
		{
			"key": "randomTheme",
			"value": ""
		},
		{
			"key": "randomKeyword1",
			"value": ""
		},
		{
			"key": "randomKeyword2",
			"value": ""
		},
		{
			"key": "randomLicence",
			"value": ""
		},
		{
			"key": "randomOrg",
			"value": ""
		},
		{
			"key": "randomContact1",
			"value": ""
		},
		{
			"key": "randomContact2",
			"value": ""
		},
		{
			"key": "randomSummary",
			"value": ""
		},
		{
			"key": "randomSynopsis",
			"value": ""
		},
		{
			"key": "randomTitle",
			"value": ""
		},
		{
			"key": "seedOrg1Id",
			"value": ""
		},
		{
			"key": "seedOrg1Name",
			"value": ""
		},
		{
			"key": "seedOrg1Address",
			"value": ""
		},
		{
			"key": "seedOrg2Id",
			"value": ""
		},
		{
			"key": "seedOrg2Name",
			"value": ""
		},
		{
			"key": "seedOrg2Address",
			"value": ""
		},
		{
			"key": "seedContact1Id",
			"value": ""
		},
		{
			"key": "seedContact1Name",
			"value": ""
		},
		{
			"key": "seedContact1Email",
			"value": ""
		},
		{
			"key": "seedContact2Id",
			"value": ""
		},
		{
			"key": "seedContact2Name",
			"value": ""
		},
		{
			"key": "seedContact2Email",
			"value": ""
		},
		{
			"key": "seedContact3Id",
			"value": ""
		},
		{
			"key": "seedContact3Name",
			"value": ""
		},
		{
			"key": "seedContact3Email",
			"value": ""
		},
		{
			"key": "randomOrgId",
			"value": ""
		},
		{
			"key": "randomMetaId",
			"value": ""
		},
		{
			"key": "seedLastMetaId",
			"value": ""
		},
		{
			"key": "randomMetaInfoOrg",
			"value": ""
		},
		{
			"key": "randomContact3",
			"value": ""
		},
		{
			"key": "seedMediaId",
			"value": ""
		},
		{
			"key": "seedLicence",
			"value": ""
		},
		{
			"key": "exp",
			"value": ""
		},
		{
			"key": "pm_jwt",
			"value": ""
		},
		{
			"key": "portal_jwt",
			"value": ""
		}
	]
}